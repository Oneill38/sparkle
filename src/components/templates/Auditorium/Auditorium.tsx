import React, { useMemo } from "react";
import { Switch, Route, useRouteMatch, useHistory } from "react-router";
import classNames from "classnames";

import { AuditoriumVenue } from "types/venues";
import { AuditoriumSizes } from "types/auditorium";

import { SectionPreview } from "./components/SectionPreview";
import { Section } from "./components/Section";
import { Video } from "./components/Video";

import { useAuditoriumSections } from "hooks/auditoriumSections";

import "./Auditorium.scss";
import { useVenueId } from "hooks/useVenueId";

export interface AuditoriumProps {
  venue: AuditoriumVenue;
}

/*
  TODO: Sections will be stored as a collection of a Auditorium venue.
  Each should have its own autogenerated id.
  Each will contain chats.

  I guess we should have more stricter view choice. For example: 6, 10, 20, 30+ sections.
  This way we can provide best UI for each(most used) case
*/

export const Auditorium: React.FC<AuditoriumProps> = ({ venue }) => {
  const { iframeUrl } = venue;

  const venueId = useVenueId();

  const match = useRouteMatch();
  const history = useHistory();

  const sections = useAuditoriumSections(venueId);
  const sectionsLength = sections.length;

  const sectionPreviews = sections.map((section) => (
    <SectionPreview
      key={section.id}
      onClick={() =>
        history.push(`${history.location.pathname}/section/${section.id}`)
      }
    />
  ));

  const auditoriumSize: AuditoriumSizes = useMemo(() => {
    if (sectionsLength <= 4) return AuditoriumSizes.SMALL;

    if (sectionsLength > 4 && sectionsLength <= 10) {
      return AuditoriumSizes.MEDIUM;
    }

    return AuditoriumSizes.LARGE;
  }, [sectionsLength]);

  const containerClasses = classNames("auditorium", {
    "auditorium--small": auditoriumSize === AuditoriumSizes.SMALL,
    "auditorium--medium": auditoriumSize === AuditoriumSizes.MEDIUM,
    "auditorium--large": auditoriumSize === AuditoriumSizes.LARGE,
  });

  return (
    <div className={containerClasses}>
      <Video src={iframeUrl} />
      <Switch>
        <Route path={`${match.path}/section/:sectionId`} component={Section} />
        <Route
          path={`${match.path}`}
          strict
          render={() => (
            <>
              {sectionPreviews}
              <div className="auditorium__left-empty-space" />
              <div className="auditorium__right-empty-space" />
            </>
          )}
        />
      </Switch>
    </div>
  );
};
