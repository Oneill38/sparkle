import React, { useState } from "react";

import { SectionPreviews } from "./components/SectionPreviews";
import { Section } from "./components/Section";

import { AuditoriumVenue } from "types/venues";

const enum AuditoriumVideoPosition {
  TOP = "top",
  CENTER = "center",
}

export interface AuditoriumProps {
  venue: AuditoriumVenue;
}

/*
  TODO: Sections will be stored as a collection of a Auditorium venue.
  Each should have its own autogenerated id.
  Each will contain chats.

  I guess we should have more stricter view choice. For example: 6, 10, 20, 30+ sections.
  This way we can provide best UI for each(most used) case
*/

export const Auditorium: React.FC<AuditoriumProps> = ({ venue }) => {
  // self-explainatory name. I wonder if I should have this both for FULL and SECTION view?
  const { videoPosition, sections } = venue;

  const [chosenSectionId, setChosenSectionId] = useState<string | undefined>();

  const renderedVideo = (
    /* I want to have the same experience as we have in Jazzbar, when we don't unmount the video */
    <div className="auditorium__video">
      {/* Reaction bar as a separate component(reusable in JazzBar as well) */}
    </div>
  );

  return (
    <div className="auditorium">
      <View
        // [OOS] options?
        // topLeft
        // topRight
        // bottomLeft
        // bottomRight
        center={renderedVideo}
        items={
          chosenSectionId ? (
            // This section view will lookalike our Audience template(heavily refactored, but same functionality)
            <Section sectionId={chosenSectionId} />
          ) : (
            <SectionPreviews />
          )
        }
      />
    </div>
  );
};
